Jerry Yang
Cs35L Lab 6

1) Write tr2b.c and tr2u.c

2) Compiled using GCC
gcc tr2b.c -o tr2b
gcc tr2u.c -i tr2u

3) Make a file with 5 million characters
head --bytes=5000000 /dev/urandom > file

4) tr2b.c to another file
strace -cf ./tr2b 'a' 'z' < file.txt >tr2boutput.txt
% time     seconds  usecs/call     calls    errors syscall
------ ----------- ----------- --------- --------- ----------------
 50.30    0.000338           0       640           write
 27.98    0.000188           0       642           read
  6.85    0.000046           5         9           mmap
  4.76    0.000032          16         2           open
  4.17    0.000028           7         4           mprotect
  3.12    0.000021           5         4           fstat
  1.64    0.000011          11         1           munmap
  0.74    0.000005           2         2           close
  0.45    0.000003           3         1           arch_prctl
  0.00    0.000000           0         1           brk
  0.00    0.000000           0         1         1 access
  0.00    0.000000           0         1           execve
------ ----------- ----------- --------- --------- ----------------

time ./tr2b 'a' 'z' < file.txt > tr2boutput2.txt

real    0m0.335s
user    0m0.281s
sys     0m0.010s

5) tr2b.c to terminal
strace -cf ./tr2b 'a' 'z' < file.txt
% time     seconds  usecs/call     calls    errors syscall
------ ----------- ----------- --------- --------- ----------------
 97.15    0.061393           2     20816           write
  2.57    0.001625           2       642           read
  0.09    0.000060           6         9           mmap
  0.05    0.000033           8         4           mprotect
  0.03    0.000020           5         4           fstat
  0.03    0.000017           8         2           open
  0.02    0.000013          13         1           munmap
  0.01    0.000009           4         2           close
  0.01    0.000008           8         1           brk
  0.01    0.000008           8         1         1 access
  0.01    0.000006           6         1           execve
  0.01    0.000005           5         1           arch_prctl
------ ----------- ----------- --------- --------- ----------------
100.00    0.063197                 21484         1 total

time ./tr2b 'a' 'z' < file.txt

real    0m3.696s
user    0m0.367s
sys     0m0.099s

6) tr2u.c to another file
strace -cf ./tr2u 'a' 'z' < file.txt > tr2boutput.txt
% time     seconds  usecs/call     calls    errors syscall
------ ----------- ----------- --------- --------- ----------------
 54.73   25.865822           4   5242880           write
 45.25   21.383333           4   5242882           read
  0.02    0.011247           4      2486           brk
  0.00    0.000000           0         2           open
  0.00    0.000000           0         2           close
  0.00    0.000000           0         2           fstat
  0.00    0.000000           0         7           mmap
  0.00    0.000000           0         4           mprotect
  0.00    0.000000           0         1           munmap
  0.00    0.000000           0         1         1 access
  0.00    0.000000           0         1           execve
  0.00    0.000000           0         1           arch_prctl
------ ----------- ----------- --------- --------- ----------------
100.00   47.260402              10488269         1 total

time ./tr2u 'a' 'z' < file.txt > tr2uoutput2.txt

real    0m10.731s
user    0m1.703s
sys     0m8.979s

7) tr2u.c to terminal
strace -cf ./tr2u 'a' 'z' < file.txt
% time     seconds  usecs/call     calls    errors syscall
------ ----------- ----------- --------- --------- ----------------
 54.77   27.172034           5   5242880           write
 45.20   22.424752           4   5242882           read
  0.02    0.011566           4      2486           brk
  0.00    0.000049          49         1           execve
  0.00    0.000042           6         7           mmap
  0.00    0.000026           6         4           mprotect
  0.00    0.000014           7         2           open
  0.00    0.000011          11         1           munmap
  0.00    0.000010          10         1         1 access
  0.00    0.000006           3         2           fstat
  0.00    0.000005           2         2           close
  0.00    0.000003           3         1           arch_prctl
------ ----------- ----------- --------- --------- ----------------
100.00   49.608518              10488269         1 total

time ./tr2u 'a' 'z' < file.txt

real    0m10.562s
user    0m1.637s
sys     0m8.779s
------------------------------------------------------------------
HW Section
sfrob vs. sfrobu Time

1) Creating the files:
head -0 /dev/urandom > file0.txt
head -10 /dev/urandom > file10.txt
...
head -1000000 /dev/urandom > file1000000.txt

2) Running the code:
time ./sfrobu < file10.txt
repeat for all files and for ./sfrob

In term of run time, sfrobu is slower than the sfrob script we screated
originally. This is because in our new sfrobu, we are forcing the code
to process the files byte by byte (unbuffered) which slows down how fast
our cpu can run the code/script. Including the -f slows it even more as
it introduces another minor computation of toupper.

3) Using System Calls instead of Malloc

The likely systems calls we would have to use instead of the stdlib.h 
malloc and realloc functions would be mmap and mremap which can be used
to map/unmap files into memory.

strace ./sfrobu < file10.txt

execve("./sfrobu", ["./sfrobu"], 0x7ffd29951320 /* 37 vars */) = 0
brk(NULL)                               = 0x1981000
mmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x7f62c35f6000
access("/etc/ld.so.preload", R_OK)      = -1 ENOENT (No such file or directory)
open("/etc/ld.so.cache", O_RDONLY|O_CLOEXEC) = 3
fstat(3, {st_mode=S_IFREG|0644, st_size=160424, ...}) = 0
mmap(NULL, 160424, PROT_READ, MAP_PRIVATE, 3, 0) = 0x7f62c35ce000
close(3)                                = 0
open("/lib64/libc.so.6", O_RDONLY|O_CLOEXEC) = 3
read(3, "\177ELF\2\1\1\3\0\0\0\0\0\0\0\0\3\0>\0\1\0\0\0`&\2\0\0\0\0\0"..., 832) = 832
fstat(3, {st_mode=S_IFREG|0755, st_size=2156240, ...}) = 0
mmap(NULL, 3985920, PROT_READ|PROT_EXEC, MAP_PRIVATE|MAP_DENYWRITE, 3, 0) = 0x7f62c3008000
mprotect(0x7f62c31cb000, 2097152, PROT_NONE) = 0
mmap(0x7f62c33cb000, 24576, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 3, 0x1c3000) = 0x7f62c33cb000
mmap(0x7f62c33d1000, 16896, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_ANONYMOUS, -1, 0) = 0x7f62c33d1000
close(3)                                = 0
mmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x7f62c35cd000
mmap(NULL, 8192, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x7f62c35cb000
arch_prctl(ARCH_SET_FS, 0x7f62c35cb740) = 0
mprotect(0x7f62c33cb000, 16384, PROT_READ) = 0
mprotect(0x601000, 4096, PROT_READ)     = 0
mprotect(0x7f62c35f7000, 4096, PROT_READ) = 0
munmap(0x7f62c35ce000, 160424)          = 0
fstat(0, {st_mode=S_IFREG|0644, st_size=43, ...}) = 0
brk(NULL)                               = 0x1981000
brk(0x19a2000)                          = 0x19a2000
brk(NULL)                               = 0x19a2000
read(0, "a\n1\n2\nh\nj\nk\nl\nq\n3\n4\n5\n6\nb\nc\nd\ne\n"..., 43) = 43
lseek(0, 0, SEEK_CUR)                   = 43
read(0, "", 1)                          = 0
write(1, "a", 1a)                        = 1
write(1, "\n", 1
)                       = 1
//many more write system calls


The actual system calls sfrobu runs seems to be mmap, mprotect, and munmap
that are actually related to memory allocation. mmap is what is likely what
is being used during malloc, mprotect is used to prevent our data from
being overwritten (?), and munmap is used at the end, when our data is being
freed.
